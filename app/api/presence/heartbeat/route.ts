// app/api/presence/heartbeat/route.ts

import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { withAuth } from "@/lib/authz";

export const dynamic = "force-dynamic";

const NO_STORE_HEADERS = {
  "Cache-Control": "no-store, no-cache, must-revalidate, max-age=0",
  Pragma: "no-cache",
  Expires: "0",
  Vary: "Cookie",
};

// ‚úÖ ‡¶∂‡ßÅ‡¶ß‡ßÅ authenticated ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‚Äî‡¶ï‡ßã‡¶®‡ßã extra permission ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ
export const POST = withAuth(async () => {
  try {
    // withAuth -> requireAuth ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶≤‡ßá user ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‚ÄîgetServerSession ‡¶¶‡¶ø‡ßü‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶ü‡ßá‡¶°
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá DB ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶≤‡ßá‡¶á ‡¶π‡¶¨‡ßá (user id ‡¶ü‡¶æ middleware/withAuth-‡¶è ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶°)
    // ‡¶§‡¶¨‡ßá user.id ‡¶≤‡¶æ‡¶ó‡¶≤‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá withAuth-‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡¶æ‡ßú‡¶ø‡ßü‡ßá req-‡¶è ‡¶¨‡¶∏‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø lastSeenAt ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶õ‡¶ø‚Äîcurrent user context ‡¶ß‡¶∞‡ßá‡¶á‡•§

    // üí° safest: prisma.$executeRawOr use updateMany with session user id if you pass it.
    // Minimal approach: let DB do the update using session.subject via NextAuth token in middleware.
    // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ withAuth ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá user ‡¶Ö‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ, ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶≤‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü‡¶ø‡¶≠ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá
    // ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®-‡¶ï‡¶Æ ‡¶è‡¶®‡ßç‡¶°‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø: lastSeenAt ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü-‡¶∏‡¶æ‡¶á‡¶°‡ßá userId ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®
    // ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Æ‡¶§ ‡¶õ‡ßã‡¶ü ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï) ‚Äî ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡•§

    // üîß ‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü (server-side user id ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶õ‡ßã‡¶ü ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶á‡¶â‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®)
    // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø session ‡¶•‡ßá‡¶ï‡ßá id ‡¶∞‡¶ø‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶õ‡ßã‡¶ü ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶Ü‡¶®‡¶õ‡¶ø:
    const { getServerSession } = await import("next-auth");
    const { authOptions } = await import("@/lib/auth");
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id as string | undefined;

    if (!userId) {
      return NextResponse.json(
        { ok: false },
        { status: 401, headers: NO_STORE_HEADERS }
      );
    }

    await prisma.user.update({
      where: { id: userId },
      data: { lastSeenAt: new Date() },
    });

    return NextResponse.json({ ok: true }, { headers: NO_STORE_HEADERS });
  } catch (e) {
    console.error("presence/heartbeat error:", e);
    return NextResponse.json(
      { ok: false },
      { status: 500, headers: NO_STORE_HEADERS }
    );
  }
});
